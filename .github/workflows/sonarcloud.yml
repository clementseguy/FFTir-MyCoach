name: SonarCloud

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to analyze (default: main)"
        required: false
        default: "main"
  schedule:
    - cron: "0 3 * * *"

jobs:
  guard:
    name: Guard (skip on push if PR exists)
    runs-on: ubuntu-latest
    outputs:
      has_pr: ${{ steps.check.outputs.has_pr }}
    steps:
      - name: Check for open PR from branch to main
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const isPush = context.eventName === 'push';
            if (!isPush) {
              core.setOutput('has_pr', 'false');
              return;
            }
            const branch = context.ref.replace('refs/heads/','');
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${branch}`, base: 'main' });
            core.setOutput('has_pr', prs.length > 0 ? 'true' : 'false');

  build-and-analyze:
    name: Test & SonarCloud
    runs-on: windows-latest
    needs: guard
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && needs.guard.outputs.has_pr == 'false') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    concurrency:
      group: sonar-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout (push/PR)
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout main (schedule)
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Checkout input branch (dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch }}

      - name: Set up Java 17 (required by SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Use composite SonarScanner action (not Docker-based) as recommended for Dart
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Upload coverage artifact (optional)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-lcov
          path: coverage/lcov.info
